{% extends "base.jinja" %}

{% block content %}
ARG TENSORFLOW_VERSION=v{{ _version }}
ARG KERAS_VERSION={{ _keras_version }}

RUN git clone https://github.com/tensorflow/tensorflow.git --branch ${TENSORFLOW_VERSION} --single-branch
WORKDIR /tensorflow

ENV CI_BUILD_PYTHON python
{% if arch == 'gpu' -%}
{% set BUILD_LD_LIBRARY_PATH = '/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH}' %}
{% set EXTRA_BUILD_CFG = '--config=cuda --action_env=LD_LIBRARY_PATH=' + BUILD_LD_LIBRARY_PATH -%}
{% set PRE_CFG_CMD = 'ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && LD_LIBRARY_PATH=' + BUILD_LD_LIBRARY_PATH + ' ' -%}
# Configure the build for our CUDA configuration.
ENV LD_LIBRARY_PATH /usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_CUDA_VERSION {{ cuda_version }}
ENV TF_CUDNN_VERSION {{ cudnn_version }}
ENV TF_NEED_CUDA 1
{#- taken from https://developer.nvidia.com/cuda-gpus #}
{%- if cuda_version.startswith('9') %}
ENV TF_CUDA_COMPUTE_CAPABILITIES=3.7,7.0
{%- else %}
ENV TF_CUDA_COMPUTE_CAPABILITIES=3.7
{%- endif %}

{% else %}
{% set EXTRA_BUILD_CFG = '' -%}
{% set PRE_CFG_CMD = '' -%}
{% endif %}

# install mock for py2 build
RUN python --version 2>&1 | grep 'Python 2' \
    && pip --no-cache-dir install \
        mock \
        && rm -rf /pip_pkg \
        && rm -rf /tmp/* \
        && rm -rf /root/.cache \
    || true


# NOTE: This command uses special flags to build an optimized image for AWS machines.
# This image might *NOT* work on other machines
# Clean up pip wheel and Bazel cache when done.
RUN {{ PRE_CFG_CMD }}tensorflow/tools/ci_build/builds/configured {{ arch | upper }} \
    bazel build -c opt --copt=-msse3 --copt=-msse4.1 --copt=-msse4.2 \
        --copt=-mavx --copt=-mavx2 \
        --copt=-mfma \
        --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        {{ EXTRA_BUILD_CFG }} \
        --verbose_failures \
        tensorflow/tools/pip_package:build_pip_package \
    && bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip \
    && pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl \
    && rm -rf /pip_pkg \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache \
    && cd / && rm -rf tensorflow

WORKDIR /

# Install Keras and tflearn
# TODO: move h5py into dl-python base
RUN pip --no-cache-dir install \
        git+git://github.com/fchollet/keras.git@${KERAS_VERSION} \
        tflearn==0.3.2 \
    && rm -rf /pip_pkg \
    && rm -rf /tmp/* \
    && rm -rf /root/.cache
{%- endblock %}
